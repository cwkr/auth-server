<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Auth Server - Index</title>
    <link rel="stylesheet" href="{{ .base_path }}/style">
    <link rel="icon" type="image/png" href="{{ .base_path }}/favicon-16x16.png" sizes="16x16">
    <link rel="icon" type="image/png" href="{{ .base_path }}/favicon-32x32.png" sizes="32x32">
    <script>
        function remember() {
            const state = document.getElementById("state").value;
            const clientId = document.getElementById("client_id").value;
            const responseType = document.getElementById("response_type").value;
            const scope = document.getElementById("scope").value;
            const codeVerifier = document.getElementById("code_verifier").value;
            sessionStorage.setItem("client_id", clientId);
            sessionStorage.setItem("response_type", responseType);
            sessionStorage.setItem("scope", scope);
            if (responseType === "code") {
                sessionStorage.setItem('client_id'+state, clientId);
                sessionStorage.setItem('code_verifier'+state, codeVerifier);
            }
        }

        function onResponseTypeChange(responseType) {
            if (responseType === "code") {
                document.querySelectorAll("#code_challenge, #code_challenge_method, #nonce, #scope").forEach(input => {
                    input.disabled = false;
                });
            } else if (responseType === "token") {
                document.querySelectorAll("#code_challenge, #code_challenge_method, #nonce").forEach(input => {
                    input.disabled = true;
                });
                document.querySelectorAll("#scope").forEach(input => {
                    input.disabled = false;
                });
            } else if (responseType === "client_credentials") {
                document.querySelectorAll("#code_challenge, #code_challenge_method, #nonce, #scope").forEach(input => {
                    input.disabled = true;
                });
            }
        }

        function onFormSubmit() {
            const responseType = document.getElementById("response_type").value;
            if (responseType === 'client_credentials') {
                const postParams = new URLSearchParams({
                    "grant_type": "client_credentials",
                    "client_id": document.getElementById("client_id").value,
                    "client_secret": prompt("Client secret (required)") || ''
                });
                fetch("token", {method: "POST", body: postParams})
                    .then(async resp => {
                        if (!resp.ok) {
                            throw new Error(await resp.text());
                        }
                        return resp.json();
                    })
                    .then(data => {
                        if (data.access_token) {
                            document.getElementById("access_token_output").textContent = data.access_token;
                            document.getElementById("access_token_panel").style.display = 'block';
                            document.getElementById("refresh_token_panel").style.display = 'none';
                            document.getElementById("id_token_panel").style.display = 'none';
                        }
                    })
                    .catch(error => {
                        console.error(error);
                        document.getElementById("access_token_output").textContent = error.message;
                        document.getElementById("access_token_panel").style.display = 'block';
                        document.getElementById("refresh_token_panel").style.display = 'none';
                        document.getElementById("id_token_panel").style.display = 'none';
                    });
                return false;
            }

            remember();
            return true;
        }
    </script>
</head>
<body>
<h1>Auth Server</h1>
{{- if .login_active }}
    <h2>Current user: {{ .user_id }}</h2>
    <p>Session started <strong>{{ .login_start }}</strong> will expire <strong>{{ .login_expiry }}</strong></p>
    <form method="get" action="{{ .base_path }}/logout">
        <input type="hidden" name="post_logout_redirect_uri" value="{{ .issuer }}/">
        <button type="submit">Logout</button>
    </form>
{{- end }}
<h2>Test</h2>
<form method="get" action="{{ .base_path }}/authorize" onsubmit="return onFormSubmit()">
    <input type="hidden" name="redirect_uri" value="{{ .issuer }}/">
    <input type="hidden" id="state" name="state" value="{{ .state }}">
    <input type="hidden" id="nonce" name="nonce" value="{{ .nonce }}">
    <input type="hidden" id="code_verifier" name="code_verifier" value="{{ .code_verifier }}" disabled>
    <input type="hidden" id="code_challenge" name="code_challenge" value="{{ .code_challenge }}" disabled>
    <input type="hidden" id="code_challenge_method" name="code_challenge_method" value="S256" disabled>
    <label for="response_type">Flow</label>
    <select id="response_type" name="response_type" onchange="onResponseTypeChange(this.value);">
        <option value="token">Implicit (access token only)</option>
        <option value="code">Authorization Code (access token with refresh token and id token depending on scope)</option>
        <option value="client_credentials">Client Credentials (access token only)</option>
    </select>
    <label for="client_id">Client</label>
    <select id="client_id" name="client_id">
        {{- range .clients.ClientsMatchingRedirectURI (printf "%s/" .issuer) }}
            <option value="{{ . }}">{{ . }}</option>
        {{- end }}
    </select>
    <label for="scope">Scope</label>
    <select id="scope" name="scope">
        <option value="">---</option>
        <option value="offline_access">offline_access</option>
        <option value="openid profile email">openid profile email</option>
        <option value="{{ .scope }}">{{ .scope }}</option>
    </select>
    <button type="submit">Get token</button>
</form>
<div id="access_token_panel" style="display: none;">
    <h3>Access token</h3>
    <pre style="white-space: pre-wrap; word-wrap: break-word;"><code id="access_token_output"></code></pre>
</div>
<div id="refresh_token_panel" style="display: none;">
    <h3>Refresh token</h3>
    <pre style="white-space: pre-wrap; word-wrap: break-word;"><code id="refresh_token_output"></code></pre>
</div>
<div id="id_token_panel" style="display: none;">
    <h3>Id token</h3>
    <pre style="white-space: pre-wrap; word-wrap: break-word;"><code id="id_token_output"></code></pre>
</div>

<h2>Public Key</h2>
<div>
    <a href="{{ .base_path }}/jwks">JSON Web Key Set</a>
</div>
<pre><code>{{ .public_key }}</code></pre>

<script>
    const rememberedResponseType = sessionStorage.getItem("response_type");
    if (rememberedResponseType) {
        document.getElementById("response_type").value = rememberedResponseType;
        onResponseTypeChange(rememberedResponseType)
    }

    const rememberedClientId = sessionStorage.getItem("client_id");
    if (rememberedClientId) {
        document.getElementById("client_id").value = rememberedClientId;
    }

    const rememberedScope = sessionStorage.getItem("scope");
    if (rememberedScope) {
        document.getElementById("scope").value = rememberedScope;
    }

    let urlParams = new URLSearchParams();
    const hash = window.location.hash.substring(1);
    if (hash) {
        urlParams = new URLSearchParams(hash);
    } else if (window.location.search) {
        urlParams = new URLSearchParams(window.location.search);
    }
    if (urlParams.has("access_token") === true) {
        document.getElementById("access_token_output").textContent = urlParams.get("access_token");
        document.getElementById("access_token_panel").style.display = 'block';
    } else if (urlParams.has("code") === true) {
        const postParams = new URLSearchParams({
            "grant_type": "authorization_code",
            "code": urlParams.get("code"),
            "client_id": sessionStorage.getItem('client_id'+urlParams.get("state")),
            "code_verifier": sessionStorage.getItem('code_verifier'+urlParams.get("state"))
        });
        fetch("token", {method: "POST", body: postParams})
            .then(async resp => {
                if (!resp.ok) {
                    throw new Error(await resp.text());
                }
                return resp.json();
            })
            .then(data => {
                if (data.access_token) {
                    document.getElementById("access_token_output").textContent = data.access_token;
                    document.getElementById("access_token_panel").style.display = 'block';
                }
                if (data.refresh_token) {
                    document.getElementById("refresh_token_output").textContent = data.refresh_token;
                    document.getElementById("refresh_token_panel").style.display = 'block';
                }
                if (data.id_token) {
                    document.getElementById("id_token_output").textContent = data.id_token;
                    document.getElementById("id_token_panel").style.display = 'block';
                }
                sessionStorage.removeItem('client_id'+urlParams.get("state"));
                sessionStorage.removeItem('code_verifier'+urlParams.get("state"));
            })
            .catch(error => {
                console.error(error);
                document.getElementById("access_token_output").textContent = error.message;
                document.getElementById("access_token_panel").style.display = 'block';
            });
    }
</script>
</body>
</html>
