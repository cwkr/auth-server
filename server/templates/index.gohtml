<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{{ .title }}</title>
    <link rel="stylesheet" href="style">
    <script>
        function remember() {
            const state = document.getElementById("state").value;
            const clientId = document.getElementById("client_id").value;
            const responseType = document.getElementById("response_type").value;
            {{- if .pkce }}
            const codeVerifier = document.getElementById("code_verifier").value;
            {{- end }}
            sessionStorage.setItem("client_id", clientId);
            sessionStorage.setItem("response_type", responseType);
            if (responseType === "code") {
                sessionStorage.setItem('client_id'+state, clientId);
                {{- if .pkce }}
                sessionStorage.setItem('code_verifier'+state, codeVerifier);
                {{- end }}
            }
        }
        {{- if .pkce }}
        function togglePkceParams(responseType) {
            if (responseType === "code") {
                document.getElementById("code_challenge").disabled = false;
                document.getElementById("code_challenge_method").disabled = false;
            } else if (responseType === "token") {
                document.getElementById("code_challenge").disabled = true;
                document.getElementById("code_challenge_method").disabled = true;
            }
        }
        {{- end }}
    </script>
</head>
<body>
<h1>{{ .title }}</h1>
{{- if .login_active }}
    <h2>Current user: <a href="{{ .issuer }}/me">{{ .user_id }}</a></h2>
    <p>Session started <strong>{{ .login_start }}</strong> will expire <strong>{{ .login_expiry }}</strong></p>
    <form method="get" action="{{ .issuer }}/logout">
        <input type="hidden" name="state" value="{{ .state }}">
        <button type="submit">Logout</button>
    </form>
{{- end }}
<h2>OAuth2</h2>
<form method="get" action="{{ .issuer }}/auth" onsubmit="remember()">
    <input type="hidden" name="redirect_uri" value="{{ .issuer }}/">
    <input type="hidden" id="state" name="state" value="{{ .state }}">
{{- if .pkce }}
    <input type="hidden" id="code_verifier" name="code_verifier" value="{{ .code_verifier }}" disabled>
    <input type="hidden" id="code_challenge" name="code_challenge" value="{{ .code_challenge }}" disabled>
    <input type="hidden" id="code_challenge_method" name="code_challenge_method" value="S256" disabled>
{{- end }}
    <label for="response_type">Flow</label>
    <select id="response_type" name="response_type"{{ if .pkce }} onchange="togglePkceParams(this.value);"{{ end }}>
        <option value="token">Implicit</option>
        <option value="code">Authorization Code</option>
    </select>
    <label for="client_id">Client</label>
    <select id="client_id" name="client_id">
        {{- range .clients.ClientsMatchingRedirectURI (printf "%s/" .issuer) }}
            <option value="{{ . }}">{{ . }}</option>
        {{- end }}
    </select>
    <button type="submit">Get token</button>
</form>
<pre id="token_output" style="white-space: pre-wrap; word-wrap: break-word; min-height: 16em;">
</pre>
<h2>Public Key</h2>
<div>
    <a href="{{ .issuer }}/jwks">JSON Web Key Set</a>
</div>
<pre>
{{ .public_key }}
</pre>
<h2>Spring Boot</h2>
<h3>Maven dependency</h3>
<pre style="white-space: pre-wrap; word-wrap: break-word;">
<strong>&lt;dependency&gt;</strong>
    <strong>&lt;groupId&gt;</strong>org.springframework.boot<strong>&lt;/groupId&gt;</strong>
    <strong>&lt;artifactId&gt;</strong>spring-boot-starter-oauth2-resource-server<strong>&lt;/artifactId&gt;</strong>
<strong>&lt;/dependency&gt;</strong>
</pre>
<h3>Configuration property</h3>
<pre style="white-space: pre-wrap; word-wrap: break-word;">
<strong>spring.security.oauth2.resourceserver.jwt.jwk-set-uri</strong>={{ .issuer }}/jwks
</pre>

<script>
    const rememberedResponseType = sessionStorage.getItem("response_type");
    if (rememberedResponseType) {
        document.getElementById("response_type").value = rememberedResponseType;
        {{- if .pkce }}
        togglePkceParams(rememberedResponseType)
        {{- end }}
    }

    const rememberedClientId = sessionStorage.getItem("client_id");
    if (rememberedClientId) {
        document.getElementById("client_id").value = rememberedClientId;
    }

    let urlParams = new URLSearchParams();
    const hash = window.location.hash.substring(1);
    if (hash) {
        urlParams = new URLSearchParams(hash);
    } else if (window.location.search) {
        urlParams = new URLSearchParams(window.location.search);
    }
    if (urlParams.has("access_token") === true) {
        document.getElementById("token_output").textContent = urlParams.get("access_token");
    } else if (urlParams.has("code") === true) {
        const postParams = new URLSearchParams({
            "grant_type": "authorization_code",
            "code": urlParams.get("code"),
            "client_id": sessionStorage.getItem('client_id'+urlParams.get("state")),
            {{- if .pkce }}
            "code_verifier": sessionStorage.getItem('code_verifier'+urlParams.get("state"))
            {{- end }}
        });
        fetch("token", {method: "POST", body: postParams})
            .then(async resp => {
                if (!resp.ok) {
                    throw new Error(await resp.text());
                }
                return resp.json();
            })
            .then(data => {
                document.getElementById("token_output").textContent = data.access_token;
                sessionStorage.removeItem('client_id'+urlParams.get("state"));
                {{- if .pkce }}
                sessionStorage.removeItem('code_verifier'+urlParams.get("state"));
                {{- end }}
            })
            .catch(error => {
                console.error(error);
                document.getElementById("token_output").textContent = error.message;
            });
    }
</script>
</body>
</html>
